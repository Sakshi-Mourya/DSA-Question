/* Reverse a doubly linked list in groups of given size

Reverse a doubly linked list in groups of given size

Solution 1 :

#include <bits/stdc++.h>

using namespace std;

struct Node {
	int data;
	Node *next, *prev;
};

Node* getNode(int data)
{
	Node* new_node = (Node*)malloc(sizeof(Node));

	new_node->data = data;
	new_node->next = new_node->prev = NULL;
	return new_node;
}

void push(Node** head_ref, Node* new_node)
{
	new_node->prev = NULL;

	new_node->next = (*head_ref);

	if ((*head_ref) != NULL)
		(*head_ref)->prev = new_node;

	(*head_ref) = new_node;
}

Node* revListInGroupOfGivenSize(Node* head, int k)
{
	Node *current = head;
	Node* next = NULL;
	Node* newHead = NULL;
	int count = 0;
	
	while (current != NULL && count < k)
	{
		next = current->next;
		push(&newHead, current);
		current = next;
		count++;
	}

	if (next != NULL)
	{
		head->next = revListInGroupOfGivenSize(next, k);
		head->next->prev = head;
	}
	
	newHead->prev = NULL;
	return newHead;
}

void printList(Node* head)
{
	while (head != NULL) {
		cout << head->data << " ";
		head = head->next;
	}
}

int main()
{
	Node* head = NULL;

	push(&head, getNode(2));
	push(&head, getNode(4));
	push(&head, getNode(8));
	push(&head, getNode(10));
	
	int k = 2;

	cout << "Original list: ";
	printList(head);

	head = revListInGroupOfGivenSize(head, k);

	cout << "\nModified list: ";
	printList(head);

	return 0;
}

Solution 2:

#include <iostream>
using namespace std;
struct Node {
	int data;
	Node *next, *prev;
};

Node* insertAtEnd(Node* head, int data)
{

	Node* new_node = new Node();
	new_node->data = data;
	new_node->next = NULL;
	Node* temp = head;
	if (head == NULL) {
		new_node->prev = NULL;
		head = new_node;
		return head;
	}

	while (temp->next != NULL) {
		temp = temp->next;
	}
	temp->next = new_node;
	new_node->prev = temp;
	return head;
}

void printDLL(Node* head)
{
	while (head != NULL) {
		cout << head->data << " ";
		head = head->next;
	}
	cout << endl;
}

Node* reverseByN(Node* head, int k)
{
	if (!head)
		return NULL;
	head->prev = NULL;
	Node *temp, *curr = head, *newHead;
	int count = 0;
	while (curr != NULL && count < k) {
		newHead = curr;
		temp = curr->prev;
		curr->prev = curr->next;
		curr->next = temp;
		curr = curr->prev;
		count++;
	}
	
	if (count >= k) {
		Node* rest = reverseByN(curr, k);
		head->next = rest;
		if (rest != NULL)
			rest->prev = head;
	}
	return newHead;
}
int main()
{
	Node* head;
	for (int i = 1; i <= 10; i++) {
		head = insertAtEnd(head, i);
	}
	printDLL(head);
	int n = 4;
	head = reverseByN(head, n);
	printDLL(head);
}

Soltuion 3:

#include <iostream>
using namespace std;

struct Node {
	int data;
	Node *next, *prev;
};

Node* getNode(int data)
{
	// allocating node
	Node* new_node = new Node();
	new_node->data = data;
	new_node->next = new_node->prev = NULL;

	return new_node;
}
Node* push(Node* head, Node* new_node)
{
	new_node->prev = NULL;

	new_node->next = head;

	if (head != NULL)
		head->prev = new_node;

	head = new_node;
	return head;
}

Node* revListInGroupOfGivenSize(Node* head, int k)
{
	if (!head)
		return head;

	Node* st = head;
	Node* globprev = NULL;
	Node* ans = NULL;
	while (st) {
		int count = 1; 
		Node* curr = st;
		Node* prev = NULL;
		Node* next = NULL;
		while (curr && count <= k) { 
			next = curr->next;
			curr->prev = next;
			curr->next = prev;
			prev = curr;
			curr = next;
			count++;
		}

		if (!ans) {
			ans = prev; 
			ans->prev = NULL;
		}

		if (!globprev)
			globprev = st; 
		else {
			globprev->next = prev;
			prev->prev
				= globprev; 
			globprev = st;
		}

		st = curr; 
}
	return ans;
}

void printList(Node* head)
{
	while (head) {
		cout << head->data << " ";
		head = head->next;
	}
}

int main()
{
	Node* head = NULL;

	// Create doubly linked: 10<->8<->4<->2
	head = push(head, getNode(2));
	head = push(head, getNode(4));
	head = push(head, getNode(8));
	head = push(head, getNode(10));

	int k = 2;

	cout << "Original list: ";
	printList(head);

	head = revListInGroupOfGivenSize(head, k);

	cout << "\nModified list: ";
	printList(head);
	return 0;
}

Original list: 10 8 4 2 
Modified list: 8 10 2 4 
