/* Counting Rock Samples

John is a geologist, and he needs to count rock samples in order to send it to a chemical laboratory. He has a problem. The laboratory only accepts rock samples by a range of sizes in ppm (parts per million). John needs your help. Your task is to develop a program to get the number of rocks in each range accepted by the laboratory.

Problem Statement: Given an array samples[] denoting sizes of rock samples and a 2D array ranges[], the task is to count the rock samples that are in the range ranges[i][0] to ranges[i][1], for every possible 1 <= i <= N.

Examples:

Input: samples[] = {345, 604, 321, 433, 704, 470, 808, 718, 517, 811}, ranges[] = {{300, 380}, {400, 700}}
Output: 2 4
Explanation: 
Range [300, 380]: Samples {345, 321} lie in the range. Therefore, the count is 2. 
Range [400, 700]: Samples {433, 604, 517, 470} lie in the range. Therefore, the count is 4.

Input: samples[] = {400, 567, 890, 765, 987}, ranges[] = {{300, 380}, {800, 1000}
Output: 0 2

Solution:

// C++ program of the
// above approach
#include<bits/stdc++.h>
using namespace std;

void findRockSample(vector<vector<int>>ranges,
			int n, int r, vector<int>arr)
{
	vector<int>a;
	
	// Iterate over the ranges
	for(int i = 0; i < r; i++)
	{
	int c = 0;
	int l = ranges[i][0];
	int h = ranges[i][1];
		
	for(int j = 0; j < arr.size(); j++)
	{
		if (l <= arr[j] && arr[j] <= h)
			c += 1;
		}
		a.push_back(c);
	}
	for(auto i:a)
		cout << i << " ";
}

// Driver Code
int main()
{
	int n = 5;
	int r = 2;
	
	vector<int>arr = { 400, 567, 890, 765, 987 };
	vector<vector<int>>ranges = { { 300, 380 },
								{ 800, 1000 } };
	
	// Function call
	findRockSample(ranges, n, r, arr);
}

// This code is contributed by Stream_Cipher
