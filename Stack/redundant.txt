/* Expression contains redundant bracket or not

Given a string of balanced expression, find if it contains a redundant parenthesis or not. A set of parenthesis are redundant if the same sub-expression is surrounded by unnecessary or multiple brackets. Print ‘Yes’ if redundant, else ‘No’.

Note: Expression may contain ‘+‘, ‘*‘, ‘–‘ and ‘/‘ operators. Given expression is valid and there are no white spaces present.

Example: 

Input: 
((a+b))
(a+(b)/c)
(a+b*(c-d))
Output: 
Yes
Yes
No

Explanation:
1. ((a+b)) can reduced to (a+b), this Redundant
2. (a+(b)/c) can reduced to (a+b/c) because b is
surrounded by () which is redundant.
3. (a+b*(c-d)) doesn't have any redundant or multiple
brackets.

Solution :

#include <bits/stdc++.h>
using namespace std;

bool checkRedundancy(string& str)
{
	stack<char> st;

	for (auto& ch : str) {

		if (ch == ')') {
			char top = st.top();
			st.pop();

			bool flag = true;

			while (!st.empty() and top != '(') {

				if (top == '+' || top == '-' ||
					top == '*' || top == '/')
					flag = false;

				top = st.top();
				st.pop();
			}

			if (flag == true)
				return true;
		}

		else
			st.push(ch); 
				
	}
	return false;
}


void findRedundant(string& str)
{
	bool ans = checkRedundancy(str);
	if (ans == true)
		cout << "Yes\n";
	else
		cout << "No\n";
}

// Driver code
int main()
{
	string str = "((a+b))";
	findRedundant(str);

	str = "(a+(b)/c)";
	findRedundant(str);

	str = "(a+b*(c-d))";
	findRedundant(str);

	return 0;
}
